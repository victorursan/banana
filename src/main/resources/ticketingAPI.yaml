openapi: "3.0.3"
info:
  version: 1.0.0
  title: Swagger Ticketing
servers:
  - url: http://localhost:8081/api/
paths:
  /locations/companies/{companyId}:
    get:
      summary: Get all buildings for the company
      operationId: getBuildingsForCompany
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - locations
      responses:
        '200':
          description: A list of all the locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingLocations'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/floors:
    get:
      summary: Get all floors for the user's building
      operationId: getFloors
      tags:
        - locations
      responses:
        '200':
          description: A list of all the floors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floors'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /locations/detailed/buildings:
    get:
      summary: Get all detailed building location
      operationId: getFloorLocations
      tags:
        - locations
      responses:
        '200':
          description: The building details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorLocations'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /locations/buildings:
    get:
      summary: Get all buildings
      operationId: getBuildings
      tags:
        - locations
      responses:
        '200':
          description: A list of all the buildings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buildings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new company
      operationId: addBuildingFloors
      tags:
        - locations
      requestBody:
        required: true
        description: The location to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBuildingFloors'
      responses:
        '201':
          description: The location that was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingFloors'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /locations/companies:
    post:
      summary: Add a new company
      operationId: addCompany
      tags:
        - locations
      requestBody:
        required: true
        description: The company to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCompany'
      responses:
        '201':
          description: The company that was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/{ticketId}:
    get:
      summary: Get specific ticket
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: getTicket
      tags:
        - tickets
      responses:
        '200':
          description: The ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ticket
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: updateTicket
      tags:
        - tickets
      requestBody:
        required: true
        description: The new ticket attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicket'
      responses:
        '200':
          description: The ticket was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /actions:
    post:
      summary: Actions selected
      tags:
        - tickets
      operationId: actionSelected
      requestBody:
        required: true
        description: The action selected
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionSelected'
      responses:
        '200':
          description: The newly created ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets:
    get:
      summary: Get all tickets
      operationId: getTickets
      tags:
        - tickets
      parameters:
        - name: user
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: The tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stickies/scan/{stickyLocationId}:
    get:
      summary: A sticky was scanned
      parameters:
        - name: stickyLocationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: scanSticky
      tags:
        - stickies
      responses:
        '200':
          description: The sticky location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanSticky'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stickies:
    get:
      summary: Get all stickies
      tags:
        - stickies
      operationId: getStickies
      responses:
        '200':
          description: The Stickies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stickies'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new sticky
      tags:
        - stickies
      operationId: addSticky
      requestBody:
        required: true
        description: The sticky to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSticky'
      responses:
        '200':
          description: The new sticky
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sticky'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stickies/{stickyId}:
    get:
      summary: Get the sticky with the specified id
      tags:
        - stickies
      parameters:
        - name: stickyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: getSticky
      responses:
        '200':
          description: The desired sticky
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sticky'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a sticky
      tags:
        - stickies
      parameters:
        - name: stickyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: updateSticky
      requestBody:
        required: true
        description: The new sticky attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSticky'
      responses:
        '200':
          description: The updated sticky
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sticky'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /roles:
    get:
      summary: Get all roles
      tags:
        - roles
      operationId: getRoles
      responses:
        '200':
          description: The new role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /personnel/{personnelId}:
    get:
      summary: Get personnel info
      tags:
        - personnel
      parameters:
        - name: personnelId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: getPersonnel
      responses:
        '200':
          description: The personnel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Personnel'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a personnel's info
      tags:
        - personnel
      parameters:
        - name: personnelId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: updatePersonnel
      requestBody:
        required: true
        description: The action selected
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePersonnel'
      responses:
        '200':
          description: The updated personnel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Personnel'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /personnel:
    get:
      summary: Get personnel info
      tags:
        - personnel
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
        - name: operating
          in: query
          required: false
          schema:
            type: boolean
      operationId: getPersonnelByType
      responses:
        '200':
          description: The personnel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPersonnel'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile/telegram:
    post:
      summary: Add telegram to user profile
      tags:
        - profile
      operationId: addTelegramToUser
      requestBody:
        required: true
        description: The telegram account to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramLoginData'
      responses:
        '200':
          description: The user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile:
    get:
      summary: Get profile info
      tags:
        - profile
      operationId: getProfile
      responses:
        '200':
          description: The user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      tags:
        - profile
      operationId: deleteUserProfile
      responses:
        '204':
          description: Successfully deleted user
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    BuildingLocations:
      type: object
      required:
        - company
        - buildings
        - floors
      properties:
        company:
          $ref: '#/components/schemas/Company'
        buildings:
          $ref: '#/components/schemas/Buildings'
        floors:
          $ref: '#/components/schemas/Floors'

    FloorLocations:
      type: object
      required:
        - building
        - floors
        - stickyLocations
        - desks
        - rooms
      properties:
        building:
          $ref: '#/components/schemas/Building'
        floors:
          $ref: '#/components/schemas/Floors'
        stickyLocations:
          $ref: '#/components/schemas/StickyLocations'
        desks:
          $ref: '#/components/schemas/Desks'
        rooms:
          $ref: '#/components/schemas/Rooms'

    Desks:
      type: array
      items:
        $ref: '#/components/schemas/Desk'

    Rooms:
      type: array
      items:
        $ref: '#/components/schemas/Room'

    Desk:
      type: object
      required:
        - id
        - floorId
        - name
        - active
      properties:
        id:
          type: string
          format: uuid
        floorId:
          type: string
          format: uuid
        name:
          type: string
        active:
          type: boolean

    Room:
      type: object
      required:
        - id
        - floorId
        - name
        - roomType
        - capacity
        - active
      properties:
        id:
          type: string
          format: uuid
        floorId:
          type: string
          format: uuid
        name:
          type: string
        roomType:
          type: string
          enum: ['conference_room', 'hub']
        capacity:
          type: integer
          format: int32
        active:
          type: boolean


    AddBuildingFloors:
      type: object
      required:
        - building
        - floors
      properties:
        building:
          $ref: '#/components/schemas/AddBuilding'
        floors:
          $ref: '#/components/schemas/AddFloors'

    BuildingFloors:
      type: object
      required:
        - building
        - floors
      properties:
        building:
          $ref: '#/components/schemas/Building'
        floors:
          $ref: '#/components/schemas/Floors'

    AddFloor:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    AddFloors:
      type: array
      items:
        $ref: '#/components/schemas/AddFloor'

    AddBuilding:
      type: object
      required:
        - companyId
        - name
      properties:
        companyId:
          type: string
          format: uuid
        name:
          type: string

    TelegramLoginData:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    UserProfile:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        telegramUsername:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        building:
          $ref: '#/components/schemas/Building'

    AddCompany:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Company:
      type: object
      required:
        - id
        - name
        - active
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        active:
          type: boolean

    Floor:
      type: object
      required:
        - id
        - buildingId
        - name
        - active
      properties:
        id:
          type: string
          format: uuid
        buildingId:
          type: string
          format: uuid
        name:
          type: string
        active:
          type: boolean

    Floors:
      type: array
      items:
        $ref: '#/components/schemas/Floor'

    Building:
      type: object
      required:
        - id
        - companyId
        - name
        - active
      properties:
        id:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        name:
          type: string
        active:
          type: boolean

    Buildings:
      type: array
      items:
        $ref: '#/components/schemas/Building'

    StickyLocation:
      type: object
      required:
        - id
        - floorId
        - stickyId
        - name
        - active
      properties:
        id:
          type: string
          format: uuid
        floorId:
          type: string
          format: uuid
        stickyId:
          type: string
          format: uuid
        name:
          type: string
        active:
          type: boolean

    StickyLocations:
      type: array
      items:
        $ref: '#/components/schemas/StickyLocation'

    AddStickyLocation:
      type: object
      required:
        - floorId
        - name
      properties:
        floorId:
          type: string
          format: uuid
        name:
          type: string

    AddStickyLocations:
      type: array
      items:
        $ref: '#/components/schemas/AddStickyLocation'

    TicketState:
      type: string
      enum: ['pending', 'acquired', 'solved']

    Ticket:
      type: object
      required:
        - ticketId
        - message
        - state
        - createdAt
      properties:
        ticketId:
          type: string
          format: uuid
        message:
          type: string
        state:
          $ref: '#/components/schemas/TicketState'
        createdAt:
          type: string
          format: date-time
        acquiredAt:
          type: string
          format: date-time
        solvedAt:
          type: string
          format: date-time
        ownedBy:
          type: string
          format: uuid

    Tickets:
      type: array
      items:
        $ref: '#/components/schemas/Ticket'

    ActionState:
      type: string
      enum: ['available', 'in_progress']

    Action:
      type: object
      required:
        - id
        - name
        - roles
        - state
      properties:
        id:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        state:
          $ref: '#/components/schemas/ActionState'

    Actions:
      type: array
      items:
        $ref: '#/components/schemas/Action'

    ScanSticky:
      type: object
      required:
        - id
        - locationId
        - title
        - actions
      properties:
        id:
          type: string
          format: uuid
        locationId:
          type: string
          format: uuid
        title:
          type: string
        actions:
          $ref: '#/components/schemas/Actions'

    Stickies:
      type: array
      items:
        $ref: '#/components/schemas/Sticky'

    Sticky:
      type: object
      required:
        - id
        - title
        - active
        - actions
        - locations
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        active:
          type: boolean
        actions:
          $ref: '#/components/schemas/Actions'
        locations:
          $ref: '#/components/schemas/StickyLocations'

    AddAction:
      type: object
      required:
        - name
        - roles
      properties:
        name:
          type: string
        description:
          type: string
        roles:
          type: array
          items:
            type: string

    AddActions:
      type: array
      items:
        $ref: '#/components/schemas/AddAction'

    AddSticky:
      type: object
      required:
        - title
        - actions
        - locations
      properties:
        title:
          type: string
        actions:
          $ref: '#/components/schemas/AddActions'
        locations:
          $ref: '#/components/schemas/AddStickyLocations'

    UpdateActions:
      type: object
      properties:
        add:
          $ref: '#/components/schemas/AddActions'
        activate:
          type: array
          items:
            type: string
            format: uuid
        update:
          $ref: '#/components/schemas/ActionUpdates'
        remove:
          type: array
          items:
            type: string
            format: uuid

    ActionUpdates:
      type: array
      items:
        $ref: '#/components/schemas/ActionUpdate'

    ActionUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        roles:
          type: string

    StickyLocationUpdates:
      type: array
      items:
        $ref: '#/components/schemas/StickyLocationUpdate'

    StickyLocationUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        floorId:
          type: string
          format: uuid
        name:
          type: string


    UpdateStickyLocations:
      type: object
      properties:
        add:
          $ref: '#/components/schemas/AddStickyLocations'
        activate:
          type: array
          items:
            type: string
            format: uuid
        update:
          $ref: '#/components/schemas/StickyLocationUpdate'
        remove:
          type: array
          items:
            type: string
            format: uuid

    UpdateSticky:
      type: object
      properties:
        title:
          type: string
        active:
          type: boolean
        actions:
          $ref: '#/components/schemas/UpdateActions'
        locations:
          $ref: '#/components/schemas/UpdateStickyLocations'

    ActionSelected:
      type: object
      required:
        - actionId
        - locationId
      properties:
        actionId:
          type: string
          format: uuid
        locationId:
          type: string
          format: uuid

    Role:
      type: object
      required:
        - id
        - role
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string

    Roles:
      type: array
      items:
        $ref: '#/components/schemas/Role'

    UpdatePersonnel:
      type: object
      properties:
        newLocation:
          type: string
        newRole:
          type: string

    UpdateTicket:
      type: object
      required:
        - newState
      properties:
        newState:
          $ref: '#/components/schemas/TicketState'


    AllPersonnel:
      type: array
      items:
        $ref: '#/components/schemas/Personnel'

    Personnel:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        buildingId:
          type: string
          format: uuid
        roleId:
          type: string
          format: uuid

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
